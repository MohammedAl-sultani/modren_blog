import React, { useState, useEffect } from 'react';
import { useParams, Link } from 'react-router-dom';
import styled from 'styled-components';

const PostContainer = styled.div`
  max-width: 800px;
  margin: 0 auto;
  padding: 2rem;
`;

const PostHeader = styled.div`
  text-align: center;
  margin-bottom: 3rem;
`;

const PostCategory = styled.span`
  background: ${props => props.theme.colors.primary}20;
  color: ${props => props.theme.colors.primary};
  padding: 0.5rem 1rem;
  border-radius: 1rem;
  font-size: 0.875rem;
  font-weight: 500;
  display: inline-block;
  margin-bottom: 1rem;
`;

const PostTitle = styled.h1`
  font-size: 2.5rem;
  color: ${props => props.theme.colors.text};
  margin-bottom: 1rem;
  line-height: 1.3;

  @media (max-width: ${props => props.theme.breakpoints.mobile}) {
    font-size: 2rem;
  }
`;

const PostMeta = styled.div`
  display: flex;
  justify-content: center;
  gap: 2rem;
  color: ${props => props.theme.colors.textSecondary};
  font-size: 0.875rem;
  margin-bottom: 2rem;

  @media (max-width: ${props => props.theme.breakpoints.mobile}) {
    flex-direction: column;
    gap: 0.5rem;
  }
`;

const PostImage = styled.div`
  height: 400px;
  background: linear-gradient(135deg, ${props => props.theme.colors.primary}20, ${props => props.theme.colors.secondary}20);
  border-radius: 1rem;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 4rem;
  margin-bottom: 2rem;
`;

const PostContent = styled.div`
  line-height: 1.8;
  color: ${props => props.theme.colors.text};
  font-size: 1.125rem;

  h2 {
    color: ${props => props.theme.colors.text};
    margin: 2rem 0 1rem;
    font-size: 1.75rem;
  }

  h3 {
    color: ${props => props.theme.colors.text};
    margin: 1.5rem 0 0.75rem;
    font-size: 1.5rem;
  }

  p {
    margin-bottom: 1.5rem;
  }

  ul, ol {
    margin: 1rem 0;
    padding-right: 2rem;
  }

  li {
    margin-bottom: 0.5rem;
  }

  blockquote {
    border-right: 4px solid ${props => props.theme.colors.primary};
    padding-right: 1rem;
    margin: 2rem 0;
    font-style: italic;
    color: ${props => props.theme.colors.textSecondary};
  }

  code {
    background: ${props => props.theme.colors.surface};
    padding: 0.25rem 0.5rem;
    border-radius: 0.25rem;
    font-family: 'Courier New', monospace;
    font-size: 0.875rem;
  }

  pre {
    background: ${props => props.theme.colors.surface};
    padding: 1rem;
    border-radius: 0.5rem;
    overflow-x: auto;
    margin: 1rem 0;
  }
`;

const PostActions = styled.div`
  display: flex;
  gap: 1rem;
  margin: 3rem 0;
  padding: 2rem 0;
  border-top: 1px solid ${props => props.theme.colors.border};
  border-bottom: 1px solid ${props => props.theme.colors.border};
`;

const ActionButton = styled.button`
  padding: 0.75rem 1.5rem;
  border: 1px solid ${props => props.theme.colors.border};
  background: ${props => props.liked ? props.theme.colors.error : 'transparent'};
  color: ${props => props.liked ? 'white' : props.theme.colors.text};
  border-radius: 0.5rem;
  cursor: pointer;
  transition: all 0.2s ease;
  display: flex;
  align-items: center;
  gap: 0.5rem;

  &:hover {
    background: ${props => props.theme.colors.primary};
    color: white;
  }
`;

const CommentsSection = styled.div`
  margin-top: 3rem;
`;

const CommentsTitle = styled.h3`
  color: ${props => props.theme.colors.text};
  margin-bottom: 2rem;
  font-size: 1.5rem;
`;

const CommentForm = styled.form`
  background: ${props => props.theme.colors.surface};
  padding: 2rem;
  border-radius: 1rem;
  margin-bottom: 2rem;
`;

const FormGroup = styled.div`
  margin-bottom: 1rem;
`;

const Label = styled.label`
  display: block;
  margin-bottom: 0.5rem;
  color: ${props => props.theme.colors.text};
  font-weight: 500;
`;

const Input = styled.input`
  width: 100%;
  padding: 0.75rem;
  border: 1px solid ${props => props.theme.colors.border};
  border-radius: 0.375rem;
  font-size: 1rem;
`;

const TextArea = styled.textarea`
  width: 100%;
  padding: 0.75rem;
  border: 1px solid ${props => props.theme.colors.border};
  border-radius: 0.375rem;
  font-size: 1rem;
  min-height: 120px;
  resize: vertical;
`;

const SubmitButton = styled.button`
  background: ${props => props.theme.colors.primary};
  color: white;
  padding: 0.75rem 2rem;
  border: none;
  border-radius: 0.375rem;
  cursor: pointer;
  font-weight: 500;
  transition: background 0.2s ease;

  &:hover {
    background: ${props => props.theme.colors.secondary};
  }
`;

const CommentsList = styled.div`
  display: flex;
  flex-direction: column;
  gap: 1.5rem;
`;

const Comment = styled.div`
  background: ${props => props.theme.colors.background};
  border: 1px solid ${props => props.theme.colors.border};
  border-radius: 1rem;
  padding: 1.5rem;
`;

const CommentHeader = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1rem;
`;

const CommentAuthor = styled.span`
  font-weight: 600;
  color: ${props => props.theme.colors.text};
`;

const CommentDate = styled.span`
  color: ${props => props.theme.colors.textSecondary};
  font-size: 0.875rem;
`;

const CommentContent = styled.p`
  color: ${props => props.theme.colors.text};
  line-height: 1.6;
`;

const LoadingSpinner = styled.div`
  display: flex;
  justify-content: center;
  align-items: center;
  height: 200px;
  font-size: 1.5rem;
  color: ${props => props.theme.colors.textSecondary};
`;

const Post = () => {
  const { id } = useParams();
  const [post, setPost] = useState(null);
  const [loading, setLoading] = useState(true);
  const [liked, setLiked] = useState(false);
  const [likes, setLikes] = useState(0);
  const [comments, setComments] = useState([]);
  const [newComment, setNewComment] = useState({ name: '', email: '', content: '' });

  // Mock data for demonstration
  const mockPost = {
    id: parseInt(id),
    title: 'ูุณุชูุจู ุงูุฐูุงุก ุงูุงุตุทูุงุนู ูู ุชุทููุฑ ุงูููุจ',
    category: 'technology',
    author: 'ุฃุญูุฏ ูุญูุฏ',
    date: '2024-01-15',
    readTime: '5 ุฏูุงุฆู',
    image: '๐ค',
    content: `
      <p>ูู ุนุงูู ูุชุทูุฑ ุจุณุฑุนุฉ ุงูุจุฑูุ ุฃุตุจุญ ุงูุฐูุงุก ุงูุงุตุทูุงุนู (AI) ุฃุญุฏ ุฃูู ุงูุชูููุงุช ุงูุชู ุชุดูู ูุณุชูุจู ุชุทููุฑ ุงูููุจ. ูู ุงูุชุทุจููุงุช ุงูุจุณูุทุฉ ุฅูู ุงูุฃูุธูุฉ ุงููุนูุฏุฉุ ูุบูุฑ ุงูุฐูุงุก ุงูุงุตุทูุงุนู ุงูุทุฑููุฉ ุงูุชู ูุทูุฑ ุจูุง ููููุฑ ุจูุง ูู ุงูุชุทุจููุงุช ุงูุฑูููุฉ.</p>

      <h2>ุงูุชุทูุฑุงุช ุงูุญุฏูุซุฉ ูู ุงูุฐูุงุก ุงูุงุตุทูุงุนู</h2>
      
      <p>ุดูุฏูุง ูู ุงูุณููุงุช ุงูุฃุฎูุฑุฉ ุชุทูุฑุงุช ูุฐููุฉ ูู ูุฌุงู ุงูุฐูุงุก ุงูุงุตุทูุงุนูุ ุฎุงุตุฉ ูู ูุฌุงูุงุช ูุนุงูุฌุฉ ุงููุบุฉ ุงูุทุจูุนูุฉ (NLP) ูุงูุชุนูู ุงูุขูู (Machine Learning). ูุฐู ุงูุชุทูุฑุงุช ูุชุญุช ุขูุงูุงู ุฌุฏูุฏุฉ ูุชุทููุฑ ุชุทุจููุงุช ููุจ ุฃูุซุฑ ุฐูุงุกู ููุนุงููุฉ.</p>

      <h3>ุฃูู ุงูุชุทุจููุงุช ุงูุญุงููุฉ</h3>
      
      <ul>
        <li><strong>ุงููุณุงุนุฏุงุช ุงูุฐููุฉ:</strong> ูุซู ChatGPT ูClaude ุงูุชู ุชุณุงุนุฏ ุงููุทูุฑูู ูู ูุชุงุจุฉ ุงูููุฏ</li>
        <li><strong>ุงูุชูููุฏ ุงูุชููุงุฆู ูููุญุชูู:</strong> ุฅูุดุงุก ูุตูุต ูุตูุฑ ูููุงุทุน ููุฏูู ุชููุงุฆูุงู</li>
        <li><strong>ุงูุชุฎุตูุต ุงูุฐูู:</strong> ุชุฎุตูุต ุชุฌุฑุจุฉ ุงููุณุชุฎุฏู ุจูุงุกู ุนูู ุณูููู ูุชูุถููุงุชู</li>
        <li><strong>ุงูุชุญููู ุงูุชูุจุคู:</strong> ุชููุน ุณููู ุงููุณุชุฎุฏููู ูุชุญุณูู ุงูุฃุฏุงุก</li>
      </ul>

      <blockquote>
        "ุงูุฐูุงุก ุงูุงุตุทูุงุนู ููุณ ูุฌุฑุฏ ุชูููุฉ ุฌุฏูุฏุฉุ ุจู ูู ุชุญูู ุฌุฐุฑู ูู ุทุฑููุฉ ุชูููุฑูุง ูู ุญู ุงููุดุงูู ูุชุทููุฑ ุงูุญููู."
      </blockquote>

      <h2>ุงูุชุญุฏูุงุช ูุงููุฑุต</h2>
      
      <p>ุฑุบู ุงูุฅููุงููุงุช ุงููุงุฆูุฉ ููุฐูุงุก ุงูุงุตุทูุงุนูุ ุฅูุง ุฃู ููุงู ุชุญุฏูุงุช ูุฌุจ ููุงุฌูุชูุง:</p>

      <h3>ุงูุชุญุฏูุงุช</h3>
      <ul>
        <li>ุงูุญุงุฌุฉ ุฅูู ุจูุงูุงุช ุนุงููุฉ ุงูุฌูุฏุฉ</li>
        <li>ุงูุชูุงููู ุงููุฑุชูุนุฉ ููุญูุณุจุฉ</li>
        <li>ูุฎุงูู ุงูุฎุตูุตูุฉ ูุงูุฃูุงู</li>
        <li>ุงูุญุงุฌุฉ ุฅูู ุฎุจุฑุงุก ูุชุฎุตุตูู</li>
      </ul>

      <h3>ุงููุฑุต</h3>
      <ul>
        <li>ุชุญุณูู ุชุฌุฑุจุฉ ุงููุณุชุฎุฏู ุจุดูู ูุจูุฑ</li>
        <li>ุฃุชูุชุฉ ุงูููุงู ุงููุชูุฑุฑุฉ</li>
        <li>ุงุชุฎุงุฐ ูุฑุงุฑุงุช ุฃุณุฑุน ูุฃุฏู</li>
        <li>ุฅูุดุงุก ููุชุฌุงุช ูุฎุฏูุงุช ูุจุชูุฑุฉ</li>
      </ul>

      <h2>ูุณุชูุจู ุชุทููุฑ ุงูููุจ</h2>
      
      <p>ูู ุงููุณุชูุจู ุงููุฑูุจุ ูุชููุน ุฃู ูุฑู:</p>
      
      <ol>
        <li><strong>ุงูุชุทููุฑ ุจูุณุงุนุฏุฉ ุงูุฐูุงุก ุงูุงุตุทูุงุนู:</strong> ุฃุฏูุงุช ุชุณุงุนุฏ ุงููุทูุฑูู ูู ูุชุงุจุฉ ููุฏ ุฃูุถู ูุฃุณุฑุน</li>
        <li><strong>ุงูุชุทุจููุงุช ุงูุฐููุฉ:</strong> ุชุทุจููุงุช ุชููู ุงููุณุชุฎุฏู ูุชุชููู ูุน ุงุญุชูุงุฌุงุชู</li>
        <li><strong>ุงูุชุฎุตูุต ุงููุชูุฏู:</strong> ุชุฌุงุฑุจ ูุฎุตุตุฉ ููู ูุณุชุฎุฏู ุจุดูู ูุฑูุฏ</li>
        <li><strong>ุงูุฃุชูุชุฉ ุงููุงููุฉ:</strong> ุฃุชูุชุฉ ูุนุธู ุนูููุงุช ุงูุชุทููุฑ ูุงูุตูุงูุฉ</li>
      </ol>

      <p>ุงูุฐูุงุก ุงูุงุตุทูุงุนู ููุชุญ ุขูุงูุงู ุฌุฏูุฏุฉ ูุชุทููุฑ ุงูููุจุ ููููุฑ ูุฑุตุงู ูุงุฆูุฉ ูุฅูุดุงุก ุชุทุจููุงุช ุฃูุซุฑ ุฐูุงุกู ููุนุงููุฉ. ุงููุทูุฑูู ุงูุฐูู ูุชุจููู ูุฐู ุงูุชูููุงุช ุงูููู ุณูููููู ูู ุงูููุฏูุฉ ุบุฏุงู.</p>
    `
  };

  const mockComments = [
    {
      id: 1,
      author: 'ูุญูุฏ ุนูู',
      date: '2024-01-16',
      content: 'ููุงู ุฑุงุฆุน! ุฃุชูู ูุนู ุชูุงูุงู ูู ุฃู ุงูุฐูุงุก ุงูุงุตุทูุงุนู ุณูุบูุฑ ูุณุชูุจู ุงูุชุทููุฑ.'
    },
    {
      id: 2,
      author: 'ูุงุทูุฉ ุฃุญูุฏ',
      date: '2024-01-16',
      content: 'ุดูุฑุงู ูู ุนูู ูุฐุง ุงูุชุญููู ุงูุดุงูู. ูู ููููู ูุชุงุจุฉ ููุงู ุนู ุฃูุถู ุฃุฏูุงุช ุงูุฐูุงุก ุงูุงุตุทูุงุนู ูููุทูุฑููุ'
    }
  ];

  useEffect(() => {
    // Simulate API call
    setTimeout(() => {
      setPost(mockPost);
      setComments(mockComments);
      setLikes(42);
      setLoading(false);
    }, 1000);
  }, [id]);

  const handleLike = () => {
    setLiked(!liked);
    setLikes(prev => liked ? prev - 1 : prev + 1);
  };

  const handleCommentSubmit = (e) => {
    e.preventDefault();
    if (newComment.name && newComment.content) {
      const comment = {
        id: comments.length + 1,
        author: newComment.name,
        date: new Date().toISOString().split('T')[0],
        content: newComment.content
      };
      setComments([comment, ...comments]);
      setNewComment({ name: '', email: '', content: '' });
    }
  };

  if (loading) {
    return (
      <PostContainer>
        <LoadingSpinner>ุฌุงุฑู ุชุญููู ุงูููุงู...</LoadingSpinner>
      </PostContainer>
    );
  }

  if (!post) {
    return (
      <PostContainer>
        <div style={{ textAlign: 'center', padding: '4rem 0' }}>
          <h2>ุงูููุงู ุบูุฑ ููุฌูุฏ</h2>
          <Link to="/blog">ุงูุนูุฏุฉ ุฅูู ุงููุฏููุฉ</Link>
        </div>
      </PostContainer>
    );
  }

  return (
    <PostContainer>
      <PostHeader>
        <PostCategory>ุงูุชูููููุฌูุง</PostCategory>
        <PostTitle>{post.title}</PostTitle>
        <PostMeta>
          <span>ุจูุงุณุทุฉ {post.author}</span>
          <span>{post.date}</span>
          <span>{post.readTime}</span>
        </PostMeta>
      </PostHeader>

      <PostImage>{post.image}</PostImage>

      <PostContent dangerouslySetInnerHTML={{ __html: post.content }} />

      <PostActions>
        <ActionButton liked={liked} onClick={handleLike}>
          {liked ? 'โค๏ธ' : '๐ค'} {likes} ุฅุนุฌุงุจ
        </ActionButton>
        <ActionButton>
          ๐ค ูุดุงุฑูุฉ
        </ActionButton>
        <ActionButton>
          ๐ ุญูุธ
        </ActionButton>
      </PostActions>

      <CommentsSection>
        <CommentsTitle>ุงูุชุนูููุงุช ({comments.length})</CommentsTitle>
        
        <CommentForm onSubmit={handleCommentSubmit}>
          <FormGroup>
            <Label htmlFor="name">ุงูุงุณู *</Label>
            <Input
              type="text"
              id="name"
              value={newComment.name}
              onChange={(e) => setNewComment({...newComment, name: e.target.value})}
              required
            />
          </FormGroup>
          <FormGroup>
            <Label htmlFor="email">ุงูุจุฑูุฏ ุงูุฅููุชุฑููู</Label>
            <Input
              type="email"
              id="email"
              value={newComment.email}
              onChange={(e) => setNewComment({...newComment, email: e.target.value})}
            />
          </FormGroup>
          <FormGroup>
            <Label htmlFor="content">ุงูุชุนููู *</Label>
            <TextArea
              id="content"
              value={newComment.content}
              onChange={(e) => setNewComment({...newComment, content: e.target.value})}
              required
            />
          </FormGroup>
          <SubmitButton type="submit">ุฅุฑุณุงู ุงูุชุนููู</SubmitButton>
        </CommentForm>

        <CommentsList>
          {comments.map(comment => (
            <Comment key={comment.id}>
              <CommentHeader>
                <CommentAuthor>{comment.author}</CommentAuthor>
                <CommentDate>{comment.date}</CommentDate>
              </CommentHeader>
              <CommentContent>{comment.content}</CommentContent>
            </Comment>
          ))}
        </CommentsList>
      </CommentsSection>
    </PostContainer>
  );
};

export default Post;
